#region license

/*
MediaFoundationLib - Provide access to MediaFoundation interfaces via .NET
Copyright (C) 2007
http://mfnet.sourceforge.net

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#endregion

// This file is a mess.  While technically part of MF, I'm in no hurry 
// to try to get this to work.

using System;
using System.Runtime.InteropServices;
using System.Security;

namespace MediaFoundation.OPM
{

#if ALLOW_UNTESTED_INTERFACES


    /// <summary>
    /// Represents a video output for an <c>Output Protection Manager</c> (OPM) session. 
    /// <para/>
    /// To get a pointer to this interface, call one of the following functions:
    /// </summary>
    /// <remarks>
    /// The above documentation is © Microsoft Corporation. It is reproduced here 
    /// with the sole purpose to increase usability and add IntelliSense support.
    /// <para/>
    /// View the original documentation topic online: 
    /// <a href="http://msdn.microsoft.com/en-US/library/8BF43577-3535-4F62-AC81-BB7E3C329403(v=VS.85,d=hv.2).aspx">http://msdn.microsoft.com/en-US/library/8BF43577-3535-4F62-AC81-BB7E3C329403(v=VS.85,d=hv.2).aspx</a>
    /// </remarks>
    [ComImport, System.Security.SuppressUnmanagedCodeSecurity,
    Guid("0A15159D-41C7-4456-93E1-284CD61D4E8D"),
    InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IOPMVideoOutput
    {
        /// <summary>
        /// Begins the initialization sequence for an Output Protection Manager (OPM) session.
        /// </summary>
        /// <param name="prnRandomNumber">
        /// Pointer to an <see cref="OPM.OPM_RANDOM_NUMBER"/> structure. The structure receives a 128-bit
        /// random number generated by the display driver. This number is required for the 
        /// <see cref="OPM.IOPMVideoOutput.FinishInitialization"/> method. 
        /// </param>
        /// <param name="ppbCertificate">
        /// Receives a pointer to a buffer containing the display driver's certificate. The method allocates
        /// the memory for the buffer. The caller must release the memory by calling <c>CoTaskMemFree</c>. 
        /// </param>
        /// <param name="pulCertificateLength">
        /// Receives the length of the buffer pointed to by <em>ppbCertificate</em>. 
        /// </param>
        /// <returns>
        /// If this method succeeds, it returns <strong>S_OK</strong>. Otherwise, it returns an <strong>HRESULT
        /// </strong> error code. 
        /// </returns>
        /// <remarks>
        /// <code language="cpp" title="C/C++ Syntax">
        /// HRESULT StartInitialization(
        ///   [out]  OPM_RANDOM_NUMBER *prnRandomNumber,
        ///   [out]  BYTE **ppbCertificate,
        ///   [out]  ULONG *pulCertificateLength
        /// );
        /// </code>
        /// <para/>
        /// The above documentation is © Microsoft Corporation. It is reproduced here 
        /// with the sole purpose to increase usability and add IntelliSense support.
        /// <para/>
        /// View the original documentation topic online: 
        /// <a href="http://msdn.microsoft.com/en-US/library/EEEDEB4B-753F-4EFB-B8EF-732CCE116B42(v=VS.85,d=hv.2).aspx">http://msdn.microsoft.com/en-US/library/EEEDEB4B-753F-4EFB-B8EF-732CCE116B42(v=VS.85,d=hv.2).aspx</a>
        /// </remarks>
        [PreserveSig]
        int StartInitialization(
            out OPM_RANDOM_NUMBER prnRandomNumber,
            out IntPtr ppbCertificate,
            out  int pulCertificateLength);

        /// <summary>
        /// Completes the initialization sequence for an Output Protection Manager (OPM) session.
        /// </summary>
        /// <param name="pParameters">
        /// Pointer to an <see cref="OPM.OPM_ENCRYPTED_INITIALIZATION_PARAMETERS"/> structure. Initialize this
        /// structure as described in the Remarks session. 
        /// </param>
        /// <returns>
        /// Returns an <strong>HRESULT. </strong>Possible values include, but are not limited to, those in the
        /// following table. 
        /// <para/>
        /// <list type="table">
        /// <listheader><term>Return code</term><description>Description</description></listheader>
        /// <item><term><strong>S_OK</strong></term><description>The method succeeded.</description></item>
        /// <item><term><strong>ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR</strong></term><description>An unexpected error occurred the display driver.</description></item>
        /// <item><term><strong>ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS</strong></term><description>The encrypted parameters in <em>pParameters</em> are incorrect. </description></item>
        /// </list>
        /// </returns>
        /// <remarks>
        /// <code language="cpp" title="C/C++ Syntax">
        /// HRESULT FinishInitialization(
        ///   [in]  const OPM_ENCRYPTED_INITIALIZATION_PARAMETERS *pParameters
        /// );
        /// </code>
        /// <para/>
        /// The above documentation is © Microsoft Corporation. It is reproduced here 
        /// with the sole purpose to increase usability and add IntelliSense support.
        /// <para/>
        /// View the original documentation topic online: 
        /// <a href="http://msdn.microsoft.com/en-US/library/7551E374-8745-405B-9879-D35A92D661EA(v=VS.85,d=hv.2).aspx">http://msdn.microsoft.com/en-US/library/7551E374-8745-405B-9879-D35A92D661EA(v=VS.85,d=hv.2).aspx</a>
        /// </remarks>
        [PreserveSig]
        int FinishInitialization(
            OPM_ENCRYPTED_INITIALIZATION_PARAMETERS pParameters);

        /// <summary>
        /// Sends an Output Protection Manager (OPM) status request to the display driver.
        /// </summary>
        /// <param name="pParameters">
        /// Pointer to an <see cref="OPM.OPM_GET_INFO_PARAMETERS"/> structure. Fill in this structure with data
        /// for the status request. For a list of status requests, see <c>OPM Status Requests</c>. 
        /// </param>
        /// <param name="pRequestedInformation">
        /// Pointer to an <see cref="OPM.OPM_REQUESTED_INFORMATION"/> structure. On return, the method fills in
        /// this structure with the results of the status request. 
        /// </param>
        /// <returns>
        /// Returns an <strong>HRESULT</strong>. Possible values include, but are not limited to, those in the
        /// following table. 
        /// <para/>
        /// <list type="table">
        /// <listheader><term>Return code</term><description>Description</description></listheader>
        /// <item><term><strong>S_OK</strong></term><description>The method succeeded.</description></item>
        /// <item><term><strong>ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS</strong></term><description>The OPM object was created with Certified Output Protection Protocol (COPP) semantics.</description></item>
        /// </list>
        /// </returns>
        /// <remarks>
        /// <code language="cpp" title="C/C++ Syntax">
        /// HRESULT GetInformation(
        ///   [in]   const OPM_GET_INFO_PARAMETERS *pParameters,
        ///   [out]  OPM_REQUESTED_INFORMATION *pRequestedInformation
        /// );
        /// </code>
        /// <para/>
        /// The above documentation is © Microsoft Corporation. It is reproduced here 
        /// with the sole purpose to increase usability and add IntelliSense support.
        /// <para/>
        /// View the original documentation topic online: 
        /// <a href="http://msdn.microsoft.com/en-US/library/47D724EB-07E9-4659-886A-4B492FBB2415(v=VS.85,d=hv.2).aspx">http://msdn.microsoft.com/en-US/library/47D724EB-07E9-4659-886A-4B492FBB2415(v=VS.85,d=hv.2).aspx</a>
        /// </remarks>
        [PreserveSig]
        int GetInformation(
            OPM_GET_INFO_PARAMETERS pParameters,
            out OPM_REQUESTED_INFORMATION pRequestedInformation);

        /// <summary>
        /// Sends an Output Protection Manager (OPM) status request to the display driver. Use this method when
        /// OPM is emulating Certified Output Protection Manager (COPP).
        /// </summary>
        /// <param name="pParameters">
        /// Pointer to an <see cref="OPM.OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS"/> structure. Fill in this
        /// structure with data for the status request. For a list of status requests, see 
        /// <c>OPM Status Requests</c>. 
        /// </param>
        /// <param name="pRequestedInformation">
        /// Pointer to an <see cref="OPM.OPM_REQUESTED_INFORMATION"/> structure. On return, the method fills in
        /// this structure with the results of the status request. 
        /// </param>
        /// <returns>
        /// Returns an <strong>HRESULT</strong>. Possible values include, but are not limited to, those in the
        /// following table. 
        /// <para/>
        /// <list type="table">
        /// <listheader><term>Return code</term><description>Description</description></listheader>
        /// <item><term><strong>S_OK</strong></term><description>The method succeeded.</description></item>
        /// <item><term><strong>ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS</strong></term><description>The OPM object was created with OPM semantics, not COPP semantics.</description></item>
        /// </list>
        /// </returns>
        /// <remarks>
        /// <code language="cpp" title="C/C++ Syntax">
        /// HRESULT COPPCompatibleGetInformation(
        ///   [in]   const OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS *pParameters,
        ///   [out]  OPM_REQUESTED_INFORMATION *pRequestedInformation
        /// );
        /// </code>
        /// <para/>
        /// The above documentation is © Microsoft Corporation. It is reproduced here 
        /// with the sole purpose to increase usability and add IntelliSense support.
        /// <para/>
        /// View the original documentation topic online: 
        /// <a href="http://msdn.microsoft.com/en-US/library/46C0C426-9730-4A0E-AB95-03B240BD55F0(v=VS.85,d=hv.2).aspx">http://msdn.microsoft.com/en-US/library/46C0C426-9730-4A0E-AB95-03B240BD55F0(v=VS.85,d=hv.2).aspx</a>
        /// </remarks>
        [PreserveSig]
        int COPPCompatibleGetInformation(
            OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS pParameters,
            out OPM_REQUESTED_INFORMATION pRequestedInformation);

        /// <summary>
        /// Configures a video output. This method sends an Output Protection Manager (OPM) or Certified Output
        /// Protection Protocol (COPP) command to the driver.
        /// </summary>
        /// <param name="pParameters">
        /// Pointer to an <see cref="OPM.OPM_CONFIGURE_PARAMETERS"/> structure that contains the command. For a
        /// list of OPM commands, see <c>OPM Commands</c>. 
        /// </param>
        /// <param name="ulAdditionalParametersSize">
        /// The size of the <em>pbAdditionalParameters</em> buffer, in bytes. 
        /// </param>
        /// <param name="pbAdditionalParameters">
        /// Pointer to a buffer that contains additional information for the command.
        /// </param>
        /// <returns>
        /// If this method succeeds, it returns <strong>S_OK</strong>. Otherwise, it returns an <strong>HRESULT
        /// </strong> error code. 
        /// </returns>
        /// <remarks>
        /// <code language="cpp" title="C/C++ Syntax">
        /// HRESULT Configure(
        ///   [in]  const OPM_CONFIGURE_PARAMETERS *pParameters,
        ///   [in]  ULONG ulAdditionalParametersSize,
        ///   [in]  const BYTE *pbAdditionalParameters
        /// );
        /// </code>
        /// <para/>
        /// The above documentation is © Microsoft Corporation. It is reproduced here 
        /// with the sole purpose to increase usability and add IntelliSense support.
        /// <para/>
        /// View the original documentation topic online: 
        /// <a href="http://msdn.microsoft.com/en-US/library/B8EB3561-7E81-4F4C-BCB1-1657F8556AEA(v=VS.85,d=hv.2).aspx">http://msdn.microsoft.com/en-US/library/B8EB3561-7E81-4F4C-BCB1-1657F8556AEA(v=VS.85,d=hv.2).aspx</a>
        /// </remarks>
        [PreserveSig]
        int Configure(
            OPM_CONFIGURE_PARAMETERS pParameters,
            int ulAdditionalParametersSize,
            IntPtr pbAdditionalParameters);
    }

#endif

}
